
#region Variables
$Customer = "<customerName"
$CustomerSuffix = "suffixName.org"

$KeyFilePath = "c:\beheer\key\"
$KeyFileName = ($customer + "_O365.key")
$XMLcredName = ($customer + "_O365Cred.xml")


# Enctyped credentials
$KeyFileName = ($customer + "_O365.key")
$XMLcredName = ($customer + "_O365Cred.xml")
[int]$Bit = 32


Function Create-AESKey {
    Param($KeyFilePath, [int]$Bit)
    #$KeyFilePath = "\\Machine1\SharedPath\AES.key"
    $Key = New-Object Byte[] $Bit   # You can use 16, 24, or 32 for AES
    [Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($Key)
    $Key | out-file $KeyFilePath
} 

Function Export-Credential(
    [string]$KeyFilePath,
    [string]$UserName,
    [string]$PassWord,
    [string]$ExportPath) {

    $creds = Get-Credential     #Ask for Password interactively
    $keyContent = Get-Content $KeyFilePath
    $ExportObject = New-Object psobject -Property @{
        UserName = $creds.UserName
        Password = ConvertFrom-SecureString -SecureString $creds.Password -Key $keyContent # Encrypt Password with created key
    }
    # Export encrypted contents into XML file for later use 
    $ExportObject | Export-Clixml $ExportPath
}

#region Create O365 encrypted credentials for unattended use
$KeyFilePathFull = ($KeyFilePath + "\" + $KeyFileName) 
$ExportPathXMLcred = ($KeyFilePath + "\" + $XMLcredName)
Create-AESKey -KeyFilePath $KeyFilePathFull -Bit $Bit
Export-Credential -KeyFilePath $KeyFilePathFull -ExportPath $ExportPathXMLcred -UserName $O365UserName -PassWord $O365Password
#endregion


