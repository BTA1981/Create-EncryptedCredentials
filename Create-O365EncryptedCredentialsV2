# Can be used to create a set of encrypted credentials (username and password)
# for encrypting only a password, just use the password variable and enter a bogus UPN when asked for it

#region Variables
$Customer = ""

# Enctyped credentials
$KeyFilePath = "C:\Beheer\Scripts\Encrypted-Credentials\"
$KeyFileName = ($customer + "_.key")
$XMLcredName = ($customer + "_.xml")
[int]$Bit = 32
#endregion

Function Create-AESKey {
    Param($KeyFilePath, [int]$Bit)
    $Key = New-Object Byte[] $Bit   # You can use 16, 24, or 32 for AES
    [Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($Key)
    $Key | out-file $KeyFilePath
} 

Function Export-Credential(
    [string]$KeyFilePath,
    [string]$ExportPath) {

    $creds = Get-Credential     #Ask for Password interactively
    $keyContent = Get-Content $KeyFilePath
    $ExportObject = New-Object psobject -Property @{
        UserName = $creds.UserName
        Password = ConvertFrom-SecureString -SecureString $creds.Password -Key $keyContent # Encrypt Password with created key
    }
    # Export encrypted contents into XML file for later use 
    $ExportObject | Export-Clixml $ExportPath
}

#region Create encrypted credentials for unattended use
$KeyFilePathFull = ($KeyFilePath + "\" + $KeyFileName) 
$ExportPathXMLcred = ($KeyFilePath + "\" + $XMLcredName)
Create-AESKey -KeyFilePath $KeyFilePathFull -Bit $Bit
Export-Credential -KeyFilePath $KeyFilePathFull -ExportPath $ExportPathXMLcred
#endregion


# Decrypt password
# Use this in a script to decrypt password.
#$password = Get-Content "C:\Beheer\Scripts\Encrypted-Credentials\pwd.txt" | ConvertTo-SecureString -Key (Get-Content C:\Beheer\Scripts\Encrypted-Credentials\$($customer + "_.key"))
#$passwordplain = (New-Object PSCredential 0,$password).GetNetworkCredential().Password 

